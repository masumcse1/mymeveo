package org.meveo.service.technicalservice.event;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.enterprise.event.Observes;
import javax.enterprise.event.TransactionPhase;
import javax.inject.Inject;

import jnr.ffi.annotations.In;
import org.apache.commons.io.FileUtils;
import org.jboss.weld.contexts.ContextNotActiveException;
import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.listener.CommitMessageBean;
import org.meveo.event.logging.LoggedEvent;
import org.meveo.event.qualifier.Created;
import org.meveo.event.qualifier.Removed;
import org.meveo.event.qualifier.Updated;
import org.meveo.model.ModuleItem;
import org.meveo.model.git.GitRepository;
import org.meveo.model.module.MeveoModule;
import org.meveo.model.technicalservice.endpoint.Endpoint;
import org.meveo.security.CurrentUser;
import org.meveo.security.MeveoUser;
import org.meveo.service.git.GitClient;
import org.meveo.service.git.GitHelper;
import org.meveo.service.git.MeveoRepository;
import org.meveo.service.technicalservice.endpoint.ESGeneratorService;
import org.meveo.service.technicalservice.endpoint.EndpointService;
import org.slf4j.Logger;

/**
 * Process CRUD events generated by {@link Endpoint}.
 *
 * @author Edward P. Legaspi | czetsuya@gmail.com
 * @version 6.10.0
 */
@Singleton
@Startup
@LoggedEvent
@Lock(LockType.READ)
public class EndpointEventListener {

	@Inject
	@CurrentUser
	protected MeveoUser currentUser;

	@Inject
	private Logger log;

	@Inject
	private EndpointService endpointService;

	@Inject
	private GitClient gitClient;

	@Inject
	private ESGeneratorService esGeneratorService;

	@Inject
	@MeveoRepository
	private GitRepository meveoRepository;

	@Inject
	private CommitMessageBean commitMessageBean;

	/**
	 * Create and commit the generated JS file to call the endpoint. Automatically
	 * called at endpoint's creation.
	 *
	 * @param endpoint Created endpoint
	 * @return the generated file
	 * @throws IOException       if file cannot be created
	 * @throws BusinessException if the changes can't be commited
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public File createESFile(@Observes(during = TransactionPhase.AFTER_SUCCESS) @Created Endpoint endpoint) throws IOException, BusinessException {

		MeveoModule module = this.endpointService.findModuleOf(endpoint);

		List<File> filesToCommit = new ArrayList<>();
		// check if base interface exists
		if (!endpointService.isBaseEndpointScriptExists()) {
			final File baseScriptFile = endpointService.getBaseScriptFile();
			FileUtils.write(baseScriptFile, esGeneratorService.buildBaseEndpointInterface(""), StandardCharsets.UTF_8);
			filesToCommit.add(baseScriptFile);
		}

		final File scriptFile = endpointService.getScriptFile(endpoint);
		FileUtils.write(scriptFile, esGeneratorService.buildJSInterface(endpoint), StandardCharsets.UTF_8);
		filesToCommit.add(scriptFile);
		String message = "Create JS script for endpoint" + endpoint.getCode();
		try {
			message+=" "+commitMessageBean.getCommitMessage();
		} catch (ContextNotActiveException e) {
			log.warn("No active session found for getting commit message when  "+message+" to "+module.getCode());
		}
		if (module != null) {
			gitClient.commitFiles(module.getGitRepository(), Collections.singletonList(scriptFile), message);
		} else {
			gitClient.commitFiles(meveoRepository, Collections.singletonList(scriptFile), message);
		}
		return scriptFile;
	}

	/**
	 * Update (or create if not exists yet) the generated JS file to call the
	 * endpoint and commit the changes if there are any. Automatically called at
	 * endpoint's update. And update the JSON file of the endpoint
	 *
	 * @param endpoint Updated endpoint
	 * @return the updated generated file
	 * @throws IOException       if file cannot be created or overwritten
	 * @throws BusinessException if the changes can't be commited
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public File updateESFile(@Observes(during = TransactionPhase.AFTER_SUCCESS) @Updated Endpoint endpoint) throws IOException, BusinessException {

		MeveoModule module = this.endpointService.findModuleOf(endpoint);

		log.debug("[CDI event] on update es file with id={}", endpoint.getId());
		final File scriptFile = endpointService.getScriptFile(endpoint);
		String updatedScript = esGeneratorService.buildJSInterface(endpoint);

		String message = "Update JS script for endpoint " + endpoint.getCode();
		try {
			message+=" "+commitMessageBean.getCommitMessage();
		} catch (ContextNotActiveException e) {
			log.warn("No active session found for getting commit message when  "+message+" to "+module.getCode());
		}

		if (!scriptFile.exists() || !FileUtils.readFileToString(scriptFile).equals(updatedScript)) {
			FileUtils.write(scriptFile, updatedScript);
			if (module != null) {
				File endpointInterface = endpointService.getBaseScriptFile();
				File gitDirectory = GitHelper.getRepositoryDir(currentUser, module.getGitRepository().getCode());
				String pathEndpointInterface = "facets/javascript/endpoints/" + "/EndpointInterface.js";
				File fileEndpointInterface = new File (gitDirectory, pathEndpointInterface);
				if (!fileEndpointInterface.exists()) {
					FileUtils.copyFile(endpointInterface, fileEndpointInterface);
				}
				gitClient.commitFiles(module.getGitRepository(), List.of(scriptFile, fileEndpointInterface), message);
			} else {
				gitClient.commitFiles(meveoRepository, Collections.singletonList(scriptFile), message);
			}
		}

		return scriptFile;
	}

	/**
	 * Remove the generated JS file from Meveo git repository. Called at endpoint's
	 * deletion.
	 *
	 * @param endpoint Removed endpoint
	 * @return the result of {@link File#delete()} called on the script file
	 * @throws BusinessException if the changes can't be commited
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public boolean removeESFile(@Observes(during = TransactionPhase.AFTER_SUCCESS) @Removed Endpoint endpoint)
			throws BusinessException {

		MeveoModule module = this.endpointService.findModuleOf(endpoint);

		File scriptFile = endpointService.getScriptFile(endpoint);
		boolean flag = true;
		if (scriptFile != null) {
			File parentDir = scriptFile.getParentFile();
			flag = scriptFile.delete();
			parentDir.delete();

			String message = "Delete JS dir and script for endpoint " + endpoint.getCode();
			try {
				message+=" "+commitMessageBean.getCommitMessage();
			} catch (ContextNotActiveException e) {
				log.warn("No active session found for getting commit message when  "+message+" to "+module.getCode());
			}

			if (module != null) {
				gitClient.commitFiles(module.getGitRepository(), Arrays.asList(scriptFile, parentDir),message);
			} else {
				gitClient.commitFiles(meveoRepository, Arrays.asList(scriptFile, parentDir),message);
			}
		}

		return flag;
	}
}