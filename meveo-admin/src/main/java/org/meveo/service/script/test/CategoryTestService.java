/**
 * 
 */
package org.meveo.service.script.test;

import java.util.List;
import java.util.Set;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.transaction.Transactional;

import org.meveo.admin.exception.BusinessException;
import org.meveo.admin.util.pagination.PaginationConfiguration;
import org.meveo.jpa.EntityManagerWrapper;
import org.meveo.jpa.MeveoJpa;
import org.meveo.model.IEntity;
import org.meveo.model.tests.CategoryTest;
import org.meveo.service.base.local.IPersistenceService;
import org.primefaces.model.SortOrder;

/**
 * 
 * @author clement.bareth
 * @since 6.10.0
 * @version 6.10.0
 */
@Transactional
public class CategoryTestService implements IPersistenceService<CategoryTest> {
	
	@Inject
	@MeveoJpa
	private EntityManagerWrapper emWrapper;
	
	@Override
	public long count() {
		return emWrapper.getEntityManager()
				.createQuery("SELECT COUNT (DISTINCT id) FROM FunctionCategory WHERE disabled = false", Long.class)
				.getSingleResult();
	}

	@Override
	public long count(PaginationConfiguration config) {
		String query = "SELECT COUNT (DISTINCT id) FROM FunctionCategory fnc WHERE fnc.disabled = false";
		
		//  Filters 
		if(config != null && config.getFilters().containsKey("category.code")) {
			query += "\nAND fnc.code LIKE :code";
		}
		
		TypedQuery<Long> typedQuery = emWrapper.getEntityManager().createQuery(query, Long.class);
		
		//  Filters values 
		if(config != null && config.getFilters().containsKey("category.code")) {
			typedQuery.setParameter("code", config.getFilters().get("category.code").toString().replace("*", "%"));
		}
		
		if(config != null && config.getFilters().containsKey("includeDisabled")) {
			if(((boolean) config.getFilters().containsKey("includeDisabled")) == false) {
				query += "AND ji.disabled = false ";
			}
		} else {
			query += "AND ji.disabled = false ";	// Don't include disabled if filter is not passed
		}
		
		return typedQuery.getSingleResult();
	}
	
	public List<CategoryTest> list() {
		return list(null);
	}
	
	@Override
	public List<CategoryTest> list(PaginationConfiguration config) {
		String query = "SELECT  new org.meveo.model.tests.CategoryTest(\r\n" + 
				"            fnCategory,\r\n" + 
				"            SUM(jeri.nbItemsCorrectlyProcessed) as nbOk,\r\n" + 
				"            SUM(jeri.nbItemsProcessedWithError) as nbKo\r\n" + 
				"        )\r\n" + 
				"\r\n" + 
				"FROM \r\n" + 
				"    JobExecutionResultImpl jeri JOIN jeri.jobInstance ji, \r\n" + 
				"    Function fn JOIN fn.category fnCategory \r\n" + 
				"\r\n" + 
				"WHERE jeri.endDate = (\r\n" + 
				"    SELECT max(jeri1.endDate)\r\n" + 
				"    FROM JobExecutionResultImpl jeri1 \r\n" + 
				"    WHERE jeri1.jobInstance.id = ji.id\r\n" + 
				")\r\n" + 
				"AND ji.jobCategoryEnum = 'TEST'\r\n" + 
				"AND fn.code = ji.parametres\r\n" + 
				"AND fnCategory.disabled = false\r\n";
		
		//  Filters 
		if(config != null && config.getFilters().containsKey("category.code")) {
			query += "AND fnCategory.code LIKE :code ";
		}
		
		if(config != null && config.getFilters().containsKey("includeDisabled")) {
			if(((boolean) config.getFilters().get("includeDisabled")) == false) {
				query += "AND ji.disabled = false ";
			}
		} else {
			query += "AND ji.disabled = false ";	// Don't include disabled if filter is not passed
		}

		query += "GROUP BY fnCategory";
		
		/*******************  Ordering ******************************/
		String sortField = config.getSortField();
		String order = null;
		if(config.getOrdering() != SortOrder.ASCENDING) {
			order = "ASC";
		} else if(config.getOrdering() != SortOrder.DESCENDING) {
			order = "DESC";
		}

		// Convert field
		switch(sortField) {
			case "code":
				sortField = "fnCategory.code";
				break;
			case "stable" : 
				sortField = "nbKo";
				break;
			case "nbKo" : 
			case "nbOk" : 
				break;
			default:
				sortField = null;
		}
		
		if(sortField != null && order != null) {
			query += "\nORDER BY " + sortField + " " + order;
		}
		
		TypedQuery<CategoryTest> typedQuery = emWrapper.getEntityManager()
				.createQuery(query, CategoryTest.class);
		
		//  Filters values 
		if(config != null && config.getFilters().containsKey("category.code")) {
			typedQuery.setParameter("code", config.getFilters().get("category.code").toString().replace("*", "%"));
		}
		
		typedQuery.setFirstResult(config.getFirstRow());
		typedQuery.setMaxResults(config.getNumberOfRows());
		
		return typedQuery.getResultList();
	}

	@Override
	public CategoryTest findById(Long id) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public CategoryTest findById(Long id, List<String> fetchFields) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public CategoryTest findById(Long id, boolean refresh) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public CategoryTest findById(Long id, List<String> fetchFields, boolean refresh) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public void create(CategoryTest e) throws BusinessException {
		// TODO Autogenerated method stub
		
	}

	@Override
	public CategoryTest update(CategoryTest e) throws BusinessException {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public CategoryTest disable(Long id) throws BusinessException {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public CategoryTest disable(CategoryTest e) throws BusinessException {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public CategoryTest enable(Long id) throws BusinessException {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public CategoryTest enable(CategoryTest e) throws BusinessException {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public void remove(Long id) throws BusinessException {
		// TODO Autogenerated method stub
		
	}

	@Override
	public void remove(CategoryTest e) throws BusinessException {
		// TODO Autogenerated method stub
		
	}

	@Override
	public void remove(Set<Long> ids) throws BusinessException {
		// TODO Autogenerated method stub
		
	}

	@Override
	public Class<CategoryTest> getEntityClass() {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public List<CategoryTest> listActive() {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public void detach(CategoryTest entity) {
		// TODO Autogenerated method stub
		
	}

	@Override
	public void refresh(IEntity entity) {
		// TODO Autogenerated method stub
		
	}

	@Override
	public CategoryTest refreshOrRetrieve(CategoryTest entity) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public List<CategoryTest> refreshOrRetrieve(List<CategoryTest> entities) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public Set<CategoryTest> refreshOrRetrieve(Set<CategoryTest> entities) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public CategoryTest retrieveIfNotManaged(CategoryTest entity) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public List<CategoryTest> retrieveIfNotManaged(List<CategoryTest> entities) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public Set<CategoryTest> retrieveIfNotManaged(Set<CategoryTest> entities) {
		// TODO Autogenerated method stub
		return null;
	}

	@Override
	public void flush() {
		emWrapper.getEntityManager().flush();
	}

	@Override
	public EntityManager getEntityManager() {
		return emWrapper.getEntityManager();
	}

	@Override
	public CategoryTest update(CategoryTest entity, boolean asyncEvent) throws BusinessException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public CategoryTest findByCode(String code) {
		// TODO Auto-generated method stub
		return null;
	}

}